---
import Button from '../components/shared/Button.astro';
import { Resend } from 'resend';

// Initialiser Resend
const resend = new Resend(import.meta.env.PUBLIC_RESEND_API_KEY);

// Variables pour les messages
let errorMessage = '';
let successMessage = '';

// Gérer la soumission du formulaire
if (Astro.request.method === 'POST') {
    try {
        const data = await Astro.request.formData();
        const name = data.get('name')?.toString() || '';
        const email = data.get('email')?.toString() || '';
        const company = data.get('company')?.toString() || '';
        const phone = data.get('phone')?.toString() || '';
        const message = data.get('message')?.toString() || '';

        const { data: emailResponse, error } = await resend.emails.send({
            from: 'onboarding@resend.dev',
            to: 'zarajeanfabrice@gmail.com',
            subject: `Nouveau contact de ${name} - ${company}`,
            html: `
                <h2>Nouveau message de contact</h2>
                <p><strong>Nom:</strong> ${name}</p>
                <p><strong>Email:</strong> ${email}</p>
                <p><strong>Entreprise:</strong> ${company}</p>
                <p><strong>Téléphone:</strong> ${phone}</p>
                <p><strong>Message:</strong></p>
                <p>${message}</p>
            `
        });

        if (error) {
            console.error('Error sending email:', error);
            errorMessage = 'An error occurred while sending your message.';
        } else {
            successMessage = 'Message sent successfully!';
        }
    } catch (error) {
        console.error('Error:', error);
        errorMessage = 'An error occurred while sending your message.';
    }
}
---

<div class="w-[73%] mx-auto">
    <form id="contactForm" class="mt-8 relative" method="post" lang="en">
        {errorMessage && (
            <div class="absolute -top-8 left-0 right-0 flex justify-center" role="alert">
                <div class="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs bg-red-50 dark:bg-red-500/5 text-red-600 dark:text-red-400 border border-red-100 dark:border-red-500/10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>{errorMessage}</span>
                </div>
            </div>
        )}

        {successMessage && (
            <div class="absolute -top-8 left-0 right-0 flex justify-center" role="alert">
                <div class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs success-container">
                    <span class="success-text">Sent</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 success-checkmark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            </div>
        )}

        <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">
            <div class="form-group">
                <input 
                    type="text" 
                    name="name" 
                    lang="en"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Full Name" 
                    required
                    minlength="2"
                    oninvalid="this.setCustomValidity('Please enter your full name (minimum 2 letters)')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group">
                <input 
                    type="email" 
                    name="email"
                    lang="en" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Email" 
                    required
                    oninvalid="this.setCustomValidity('Please enter a valid email address')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group">
                <input 
                    type="text" 
                    name="company" 
                    lang="en"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Company name" 
                    required
                />
            </div>
            <div class="form-group">
                <input 
                    type="tel" 
                    name="phone"
                    lang="en" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="Phone Number (Optional)" 
                    pattern="[0-9+\-\(\)\s]*"
                    oninvalid="this.setCustomValidity('Please use only numbers and these symbols: + - ( )')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group col-span-1 xl:col-span-2">
                <label class="block text-sm font-medium text-heading-2 dark:text-heading-2 mb-2">Message</label>
                <textarea 
                    name="message"
                    lang="en" 
                    rows="4" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="Message"
                    required
                    oninvalid="this.setCustomValidity('Please enter your message')"
                    oninput="this.setCustomValidity('')"
                ></textarea>
            </div>
        </div>
        <div class="mt-6 flex justify-center">
            <Button variant={"primary"} type="submit">
                <span class="text-white relative z-[5]">Submit</span>
            </Button>
        </div>
    </form>
</div>

<style>
    @keyframes success-flash {
        0%, 100% {
            background-color: var(--success-bg);
            border-color: var(--success-border);
        }
        50% {
            background-color: var(--success-bg-flash);
            border-color: var(--success-border-flash);
        }
    }

    @keyframes checkmark-flash {
        0%, 100% {
            stroke: var(--success-icon);
            transform: scale(1);
        }
        50% {
            stroke: var(--success-icon-flash);
            transform: scale(1.2);
        }
    }

    .success-container {
        animation: success-flash 0.6s ease-in-out 3;
        border: 1.5px solid;
        background-color: var(--success-bg);
        border-color: var(--success-border);
    }

    .success-checkmark {
        animation: checkmark-flash 0.6s ease-in-out 3;
        stroke: var(--success-icon);
    }

    .success-text {
        @apply dark:text-blue-400 text-blue-600;
    }

    :root {
        --success-bg: rgb(255, 255, 255);
        --success-bg-flash: rgba(59, 130, 246, 0.1);
        --success-border: rgb(59, 130, 246);
        --success-border-flash: rgba(59, 130, 246, 0.8);
        --success-icon: rgb(59, 130, 246);
        --success-icon-flash: rgba(59, 130, 246, 0.8);
    }

    :root.dark {
        --success-bg: rgba(59, 130, 246, 0.2);
        --success-bg-flash: rgba(147, 197, 253, 0.3);
        --success-border: rgb(147, 197, 253);
        --success-border-flash: rgba(147, 197, 253, 0.8);
        --success-icon: rgb(147, 197, 253);
        --success-icon-flash: rgba(147, 197, 253, 0.8);
    }
</style>

<script>
    const form = document.getElementById('contactForm') as HTMLFormElement;
    
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(form);
            
            try {
                const response = await fetch(window.location.href, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    // Réinitialiser le formulaire
                    form.reset();
                    
                    // Créer et afficher le message de succès
                    const successDiv = document.createElement('div');
                    successDiv.className = 'absolute -top-8 left-0 right-0 flex justify-center';
                    successDiv.setAttribute('role', 'alert');
                    successDiv.innerHTML = `
                        <div class="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs success-container">
                            <span class="success-text">Sent</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 success-checkmark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                        </div>
                    `;
                    
                    // Supprimer l'ancien message de succès s'il existe
                    const oldSuccess = form.querySelector('[role="alert"]');
                    if (oldSuccess) {
                        oldSuccess.remove();
                    }
                    
                    // Ajouter le nouveau message
                    form.insertBefore(successDiv, form.firstChild);
                    
                    // Supprimer le message après 5 secondes
                    setTimeout(() => {
                        successDiv.remove();
                    }, 5000);
                }
            } catch (error) {
                console.error('Error:', error);
                // Créer et afficher le message d'erreur
                const errorDiv = document.createElement('div');
                errorDiv.className = 'absolute -top-8 left-0 right-0 flex justify-center';
                errorDiv.setAttribute('role', 'alert');
                errorDiv.innerHTML = `
                    <div class="inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs bg-red-50 dark:bg-red-500/5 text-red-600 dark:text-red-400 border border-red-100 dark:border-red-500/10">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>An error occurred while sending your message.</span>
                    </div>
                `;
                
                // Supprimer l'ancien message d'erreur s'il existe
                const oldError = form.querySelector('[role="alert"]');
                if (oldError) {
                    oldError.remove();
                }
                
                // Ajouter le nouveau message
                form.insertBefore(errorDiv, form.firstChild);
                
                // Supprimer le message après 5 secondes
                setTimeout(() => {
                    errorDiv.remove();
                }, 5000);
            }
        });
    }
</script>