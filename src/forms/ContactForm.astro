---
import Button from '../components/shared/Button.astro';
import { Resend } from 'resend';

const resend = new Resend(import.meta.env.RESEND_API_KEY);
let errorMessage = '';
let successMessage = '';

if (Astro.request.method === 'POST') {
    try {
        const data = await Astro.request.formData();
        const name = data.get('name')?.toString() || '';
        const email = data.get('email')?.toString() || '';
        const company = data.get('company')?.toString() || '';
        const phone = data.get('phone')?.toString() || '';
        const message = data.get('message')?.toString() || '';

        const { data: emailResponse, error } = await resend.emails.send({
            from: 'onboarding@resend.dev',
            to: 'zarajeanfabrice@gmail.com',
            subject: `Nouveau contact de ${name} - ${company}`,
            html: `
                <h2>Nouveau message de contact</h2>
                <p><strong>Nom:</strong> ${name}</p>
                <p><strong>Email:</strong> ${email}</p>
                <p><strong>Entreprise:</strong> ${company}</p>
                <p><strong>Téléphone:</strong> ${phone}</p>
                <p><strong>Message:</strong></p>
                <p>${message}</p>
            `
        });

        if (error) {
            console.error('Error sending email:', error);
            errorMessage = 'An error occurred while sending your message.';
        } else {
            successMessage = 'Message sent successfully!';
        }
    } catch (error) {
        console.error('Error:', error);
        errorMessage = 'An error occurred while sending your message.';
    }
}
---

<div class="w-[73%] mx-auto">
    <form id="contactForm" class="mt-3 relative" method="post" lang="en">
        {errorMessage && (
            <div class="absolute -top-5 left-0 right-0 flex justify-center" role="alert">
                <div class="inline-flex items-center gap-1.5 px-2.5 py-0.5 rounded-full text-xs bg-red-50 dark:bg-red-500/5 text-red-600 dark:text-red-400 border border-red-100 dark:border-red-500/10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>{errorMessage}</span>
                </div>
            </div>
        )}

        {successMessage && (
            <div class="absolute -top-5 left-0 right-0 flex justify-center" role="alert">
                <div class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs success-container">
                    <span class="text-primary dark:text-blue-400 font-medium">Sent</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 text-primary dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            </div>
        )}

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-2.5 md:gap-3">
            <!-- Le reste du formulaire reste inchangé -->
            <div class="form-group col-span-1 lg:col-span-2">
                <input 
                    type="text" 
                    name="name" 
                    lang="en"
                    class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Full Name" 
                    required
                    minlength="2"
                    oninvalid="this.setCustomValidity('Please enter your full name (minimum 2 letters)')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group col-span-1 lg:col-span-2">
                <input 
                    type="email" 
                    name="email"
                    lang="en" 
                    class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Email" 
                    required
                    oninvalid="this.setCustomValidity('Please enter a valid email address')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group col-span-1 lg:col-span-2">
                <input 
                    type="text" 
                    name="company" 
                    lang="en"
                    class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="*Company name" 
                    required
                />
            </div>
            <div class="form-group col-span-1 lg:col-span-2">
                <input 
                    type="tel" 
                    name="phone"
                    lang="en" 
                    class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2" 
                    placeholder="Phone Number (Optional)" 
                    pattern="[0-9+\-\(\)\s]*"
                    oninvalid="this.setCustomValidity('Please use only numbers and these symbols: + - ( )')"
                    oninput="this.setCustomValidity('')"
                />
            </div>
            <div class="form-group col-span-1 xl:col-span-2">
                <label class="block text-sm font-medium text-heading-2 dark:text-heading-2 mb-0.5">Message</label>
                <textarea 
                    name="message"
                    lang="en" 
                    rows="3" 
                    maxlength="1000"
                    class="w-full px-3 py-1.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary dark:bg-box-bg dark:border-box-border dark:text-heading-2 resize-y min-h-[60px] max-h-[200px]" 
                    placeholder="Message"
                    required
                    oninvalid="this.setCustomValidity('Please enter your message')"
                    oninput="this.setCustomValidity('')"
                ></textarea>
                <div class="text-xs text-gray-500 mt-0.5 text-right message-length"></div>
            </div>
        </div>
        <div class="mt-3 flex justify-center">
            <Button variant={"primary"} type="submit">
                <span class="text-white relative z-[5]">Submit</span>
            </Button>
        </div>
    </form>
</div>

<style>
    @keyframes success-flash {
        0%, 100% {
            background-color: var(--success-bg);
            border-color: var(--success-border);
        }
        50% {
            background-color: var(--success-bg-flash);
            border-color: var(--success-border-flash);
        }
    }

    .success-container {
        animation: success-flash 0.6s ease-in-out 3;
        border: 1.5px solid;
        background-color: var(--success-bg);
        border-color: var(--success-border);
    }

    /* Mode clair */
    :root {
        --success-bg: rgba(29, 78, 216, 0.1);
        --success-bg-flash: rgba(29, 78, 216, 0.2);
        --success-border: rgb(29, 78, 216);
        --success-border-flash: rgba(29, 78, 216, 0.8);
    }

    /* Mode sombre */
    :root.dark {
        --success-bg: rgba(96, 165, 250, 0.2);
        --success-bg-flash: rgba(96, 165, 250, 0.3);
        --success-border: rgb(96, 165, 250);
        --success-border-flash: rgba(96, 165, 250, 0.8);
    }
</style>

<script>
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const messageTextarea = form?.querySelector('textarea[name="message"]') as HTMLTextAreaElement;
    const messageLengthDiv = form?.querySelector('.message-length') as HTMLDivElement;
    
    if (messageTextarea && messageLengthDiv) {
        const updateMessageLength = () => {
            const remaining = 1000 - messageTextarea.value.length;
            messageLengthDiv.textContent = `${remaining} characters remaining`;
        };
        
        messageTextarea.addEventListener('input', updateMessageLength);
        updateMessageLength();
    }
    
    if (form) {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            
            try {
                const response = await fetch(window.location.href, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    form.reset();
                    const successDiv = document.createElement('div');
                    successDiv.className = 'absolute -top-5 left-0 right-0 flex justify-center';
                    successDiv.setAttribute('role', 'alert');
                    successDiv.innerHTML = `
                        <div class="inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs success-container">
                            <span class="text-primary dark:text-blue-400 font-medium">Sent</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3 text-primary dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                        </div>
                    `;
                    
                    const oldSuccess = form.querySelector('[role="alert"]');
                    if (oldSuccess) {
                        oldSuccess.remove();
                    }
                    
                    form.insertBefore(successDiv, form.firstChild);
                    
                    setTimeout(() => {
                        successDiv.remove();
                    }, 5000);
                }
            } catch (error) {
                console.error('Error:', error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'absolute -top-5 left-0 right-0 flex justify-center';
                errorDiv.setAttribute('role', 'alert');
                errorDiv.innerHTML = `
                    <div class="inline-flex items-center gap-1.5 px-2.5 py-0.5 rounded-full text-xs bg-red-50 dark:bg-red-500/5 text-red-600 dark:text-red-400 border border-red-100 dark:border-red-500/10">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>An error occurred while sending your message.</span>
                    </div>
                `;
                
                const oldError = form.querySelector('[role="alert"]');
                if (oldError) {
                    oldError.remove();
                }
                
                form.insertBefore(errorDiv, form.firstChild);
                
                setTimeout(() => {
                    errorDiv.remove();
                }, 5000);
            }
        });
    }
</script>