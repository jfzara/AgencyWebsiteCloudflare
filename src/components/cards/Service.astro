---
import Paragraph from '../shared/Paragraph.astro';

export interface Props {
    title: string,
    description: string,
    icon: string
}

const { title, description, icon } = Astro.props;
---

<div class="service-card">
    <div class="card-content rounded-3xl relative min-h-[292px]">
        <div class="content-wrapper relative rounded-3xl">
            <!-- Contenu principal -->
            <div class="main-content flex flex-col items-center justify-center text-center gap-4 relative z-10 rounded-3xl h-[292px] border border-gray-200/30 dark:border-gray-700/20 bg-gradient-to-br from-white via-blue-100/50 to-indigo-100/40 dark:from-gray-900 dark:via-indigo-950/30 dark:to-blue-950/20 backdrop-blur-sm">
                <div class="icon-wrapper w-16 h-16 rounded-xl bg-gradient-to-br from-white to-blue-100 dark:from-gray-800 dark:to-indigo-900/30 flex items-center justify-center border border-gray-300/40 dark:border-gray-700/30 shadow-sm">
                    <div class="icon-container w-10 h-10 flex items-center justify-center text-primary/90">
                        <div class="w-full h-full">
                            <slot set:html={icon} />
                        </div>
                    </div>
                </div>
                <h2 class="text-lg md:text-xl font-semibold text-heading-2">
                    {title}
                </h2>
                
                <!-- Bouton d'expansion -->
                <button class="expand-btn w-8 h-8 rounded-full bg-gradient-to-br from-white to-blue-100 dark:from-gray-800 dark:to-indigo-900/30 flex items-center justify-center transition-all duration-300 hover:shadow-md hover:scale-105 border border-gray-300/40 dark:border-gray-700/30">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 text-primary/90 transition-transform duration-300">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m0 0l-6.75-6.75M12 19.5l6.75-6.75" />
                    </svg>
                </button>
            </div>

            <!-- Description -->
            <div class="description-content absolute top-[calc(100%+1rem)] left-0 right-0 z-0 opacity-0 px-6">
                <Paragraph className="text-heading-3 dark:text-gray-400">
                    {description}
                </Paragraph>
            </div>
        </div>
    </div>
</div>

<style>
.service-card {
    position: relative;
    width: 100%;
}

.card-content {
    transition: all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
    overflow: hidden;
    position: relative;
}

.content-wrapper {
    transition: transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.main-content {
    transition: transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
    padding: 2rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
}

.description-content {
    transition: all 1.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    transform: translateY(10px);
}

/* État actif */
.service-card.active .card-content {
    min-height: 436px;
}

.service-card.active .content-wrapper {
    transform: translateY(-15%);
}

.service-card.active .description-content {
    opacity: 1;
    transform: translateY(0);
}

.service-card.active .expand-btn svg {
    transform: rotate(180deg);
}

:global(.icon-container svg) {
    width: 100%;
    height: 100%;
}

/* Hover effect pour desktop */
@media (min-width: 768px) {
    .expand-btn:hover {
        transform: scale(1.1);
    }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll<HTMLElement>('.service-card');
    let activeCard: HTMLElement | null = null;
    let timer: number | null = null;

    const handleClickOutside = (e: MouseEvent) => {
        const target = e.target as HTMLElement;
        if (!target.closest('.service-card') && activeCard) {
            hideCard(activeCard);
        }
    };

    function hideCard(card: HTMLElement): void {
        card.classList.remove('active');
        if (activeCard === card) {
            activeCard = null;
        }
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    }

    function showCard(card: HTMLElement, e: Event): void {
        e.stopPropagation();
        
        if (card === activeCard) {
            hideCard(card);
            return;
        }

        if (activeCard) {
            hideCard(activeCard);
        }
        
        card.classList.add('active');
        activeCard = card;
        
        if (timer) clearTimeout(timer);
        timer = setTimeout(() => hideCard(card), 8000); // Augmenté à 8 secondes
    }

    cards.forEach(card => {
        const expandBtn = card.querySelector('.expand-btn');
        
        expandBtn?.addEventListener('click', (e) => showCard(card, e));
        
        // Gestion du hover sur desktop
        if (window.matchMedia('(min-width: 768px)').matches) {
            card.addEventListener('mouseenter', () => {
                if (timer) clearTimeout(timer);
            });
            
            card.addEventListener('mouseleave', () => {
                if (activeCard === card) {
                    timer = setTimeout(() => hideCard(card), 2000);
                }
            });
        }
    });

    document.addEventListener('click', handleClickOutside);
});
</script>
