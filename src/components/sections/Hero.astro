---
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";

const videos = [
    "/videos/video1.mp4",
    "/videos/video2.mp4",
    "/videos/video3.mp4",
    "/videos/video4.mp4"
];
---

<section id="hero" class="relative pt-6 lg:pt-36">
    <!-- Gradient shapes outside of Container -->
    <div class="fixed inset-0 pointer-events-none overflow-hidden">
        <span class="w-4/12 lg:w-2/12 aspect-square bg-gradient-to-tr from-primary to-green-400 absolute -top-5 lg:left-0 rounded-full skew-y-12 blur-2xl opacity-40 skew-x-12 rotate-90"></span>
        <span class="absolute -left-6 md:left-4 top-24 lg:top-28 w-24 h-24 rotate-90 skew-x-12 rounded-3xl bg-green-400 blur-xl opacity-60 lg:opacity-95 lg:block hidden"></span>
        <span class="absolute right-4 bottom-12 w-24 h-24 rounded-3xl bg-primary blur-xl opacity-80"></span>
    </div>

    <Container className={"flex flex-col lg:flex-row gap-10 lg:gap-12"}>
        <div class="relative flex flex-col items-center text-center lg:text-left lg:py-7 xl:py-8 
        lg:items-start lg:max-w-none max-w-3xl mx-auto lg:mx-0 lg:flex-1 lg:w-1/2">
            
            <h1 class="text-3xl/tight sm:text-4xl/tight md:text-5xl/tight xl:text-6xl/tight
             font-bold text-heading-1">
             We Transform Influencers    <span class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600">into Revenue Machines </span>  to Scale Your Brand.
            </h1>
            <Paragraph className="mt-8">
                We drive exponential revenue growth for your brand through influencer affiliate marketing and social referrals.
            </Paragraph>
            <div class="mt-10 flex justify-center lg:justify-start w-full">
                <div class="flex sm:flex-row flex-col gap-5">
                    <a href="#calendly-section">
                        <Button variant={"primary"} className={"min-w-max text-white"}>
                            <span class="flex relative z-[5]">
                                Get in touch
                            </span>
                        </Button>
                    </a>
                </div>
            </div>
        </div>

        <div class="flex flex-1 lg:w-1/2 lg:h-auto relative lg:max-w-none lg:mx-0 mx-auto max-w-3xl">
            <div class="phone-frame">
                <div class="video-container">
                    {videos.map((video, index) => (
                        <video 
                            class={`phone-video ${index === 0 ? 'active' : ''}`}
                            muted 
                            playsinline
                            preload="auto"
                            data-index={index}
                        >
                            <source src={video} type="video/mp4" />
                            Your browser does not support videos.
                        </video>
                    ))}
                </div>
            </div>
        </div>
    </Container>
</section>

<script>
    function setupVideoCarousel() {
        const videos = document.querySelectorAll<HTMLVideoElement>('.phone-video');
        let currentIndex = 0;
        const duration = 2500;
        let isTransitioning = false;

        // Précharger toutes les vidéos
        const preloadPromises = Array.from(videos).map(video => {
            return new Promise((resolve) => {
                video.load();
                video.addEventListener('loadeddata', () => resolve(true), { once: true });
            });
        });

        // Attendre que toutes les vidéos soient chargées avant de commencer
        Promise.all(preloadPromises).then(() => {
            if (videos.length > 0) {
                const firstVideo = videos[0] as HTMLVideoElement;
                firstVideo.classList.add('active');
                firstVideo.play().catch(error => {
                    console.error('Error playing first video:', error);
                });
                setTimeout(playNextVideo, duration);
            }
        });

        async function playNextVideo() {
            if (isTransitioning) return;
            isTransitioning = true;

            const currentVideo = videos[currentIndex];
            const nextIndex = (currentIndex + 1) % videos.length;
            const nextVideo = videos[nextIndex] as HTMLVideoElement;

            try {
                // Préparer la prochaine vidéo
                nextVideo.currentTime = 0;
                await nextVideo.play();

                // Effectuer la transition
                currentVideo.classList.add('previous');
                currentVideo.classList.remove('active');
                nextVideo.classList.remove('previous');
                nextVideo.classList.add('active');
                
                currentIndex = nextIndex;
                isTransitioning = false;

                // Planifier la prochaine transition
                setTimeout(playNextVideo, duration);
            } catch (error) {
                console.error('Error during video transition:', error);
                isTransitioning = false;
                setTimeout(playNextVideo, 100); // Réessayer rapidement en cas d'erreur
            }
        }
    }

    document.addEventListener('DOMContentLoaded', setupVideoCarousel);
</script>

<style>
    .phone-frame {
        position: relative;
        width: 300px;
        height: 600px;
        margin: 0 auto;
        border-radius: 40px;
        background: var(--phone-frame-color);
        padding: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        border: 8px solid var(--phone-frame-color);
        overflow: hidden;
    }

    .phone-frame::before {
        content: '';
        position: absolute;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 150px;
        height: 25px;
        background: var(--phone-frame-color);
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
        z-index: 2;
    }

    .video-container {
        position: relative;
        width: 100%;
        height: 100%;
        border-radius: 30px;
        overflow: hidden;
    }

    .phone-video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0;
        transform: translateY(-100%);
        transition: transform 0.6s cubic-bezier(0.33, 1, 0.68, 1),
                    opacity 0.3s ease-out;
        will-change: transform, opacity;
    }

    .phone-video.active {
        opacity: 1;
        transform: translateY(0);
    }

    .phone-video.previous {
        transform: translateY(100%);
        opacity: 0;
        transition: transform 0.6s cubic-bezier(0.32, 0, 0.67, 0),
                    opacity 0.3s ease-out;
    }

    @media (min-width: 1024px) {
        .phone-frame {
            width: 380px;
            height: 760px;
        }
    }

    :root {
        --phone-frame-color: rgba(241, 245, 249, 0.8); 
    }

    :root.dark {
        --phone-frame-color: #12223b6e;
    }
</style>